@using GroupsPlayground.Blazor.Components.CreateGroup
@using GroupsPlayground.Domain
@using Microsoft.AspNetCore.Components
@using System.Text

@inherits WizardStepContent

<h3>Cayley table</h3>

<p>Define the group operation by filling in the Cayley table.</p>

<EditForm EditContext="@formContext">
    <p>
        @model.ValidationMessage
    </p>
    <table class="table">
        <thead>
        <tr>
            <th></th>
            @foreach (var element in model.Elements)
            {
                <th>@element.Symbol</th>
            }
        </tr>
        </thead>
        <tbody>
        @for (int rowIndex = 0; rowIndex < model.ElementCount; rowIndex++)
        {
            var element = model.Elements[rowIndex];
            <tr>
                <th>@element.Symbol</th>
                @for (int columnIndex = 0; columnIndex < model.ElementCount; columnIndex++)
                {
                    var product = model.Products[rowIndex][columnIndex];
                    <td><InputText @bind-Value="product.Symbol"/></td>
                }
            </tr>
        }
        </tbody>
    </table>
</EditForm>

@code {
    private GroupOperationModel model;
    private EditContext formContext;

    protected override void OnInitialized()
    {
        model = new GroupOperationModel();
        formContext = new EditContext(model);
    }

    public int ElementCount
    {
        get => model.ElementCount;
        set
        {
            model.ElementCount = value;
            StateHasChanged();
        }
    }

    public CayleyTable CayleyTable => model.CayleyTable;

    public override bool Validate()
    {
        bool success = ValidateCayleyTable();
        StateHasChanged();
        return success;
    }

    private bool ValidateCayleyTable()
    {
        model.ValidationMessage = string.Empty;

        var operation = model.CayleyTable.GetBinaryOperation();
        if (!operation.IsFullyDefined())
        {
            model.ValidationMessage = "The group operation is not fully defined.\n";
            return false;
        }

        var compliance = GroupAxioms.CheckCompliance(operation);
        var builder = new StringBuilder();
        if (!compliance.IsClosed)
            builder.AppendLine("The group operation is not closed.").AppendLine();
        if (!compliance.IsAssociative)
            builder.AppendLine("The group operation is not associative.").AppendLine();
        if (!compliance.HasIdentity)
            builder.AppendLine("There is no identity element.").AppendLine();
        if (!compliance.HasInverses)
            builder.AppendLine("Some elements do not have inverses.").AppendLine();
        model.ValidationMessage = builder.ToString();

        return compliance.Success;
    }
}
