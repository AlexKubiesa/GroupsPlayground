@page "/CreateGroup/Permutations"
@using GroupsPlayground.Blazor.Components.CreateGroup
@using GroupsPlayground.Domain
@using GroupsPlayground.Domain.Groups
@using GroupsPlayground.Persistence
@inject NavigationManager navigationManager

<h1>Create group</h1>

<div>
    <PermutationGenerators @ref="permutationGenerators"/>
    <GroupName @ref="groupName"/>
</div>
<div>
    @if (isFirstStep)
    {
        <button type="button" @onclick="@OnCancel" class="btn">Cancel</button>
    }
    else
    {
        <button type="button" @onclick="@OnBack" class="btn">Back</button>
    }

    @if (isLastStep)
    {
        <button type="button" @onclick="@OnNext" class="btn btn-primary">Finish</button>
    }
    else
    {
        <button type="button" @onclick="@OnNext" class="btn btn-outline-primary">Next</button>
    }
</div>

@code {
    private readonly List<WizardStep> steps = new();
    private int stepIndex;
    private WizardStep step;
    private bool isFirstStep = true;
    private bool isLastStep;
    private PermutationGenerators permutationGenerators;
    private GroupName groupName;

    protected override void OnAfterRender(bool firstRender)
    {
        if (!firstRender)
            return;

        steps.Add(permutationGenerators);
        steps.Add(groupName);
        stepIndex = 0;
        UpdateStep();
        step.Visible = true;
    }

    public void OnCancel() => Redirect();

    public void OnBack()
    {
        step.Visible = false;
        stepIndex--;
        UpdateStep();
        step.Visible = true;
    }

    public async Task OnNext()
    {
        if (!step.Validate())
            return;

        step.Visible = false;

        if (step == groupName)
        {
            await DoCreateGroup();
            Redirect();
            return;
        }

        stepIndex++;
        UpdateStep();
        step.Visible = true;
    }

    private void Redirect() => navigationManager.NavigateTo("/");

    private void UpdateStep()
    {
        step = steps[stepIndex];
        isFirstStep = (stepIndex == 0);
        isLastStep = (stepIndex == (steps.Count - 1));
    }

    private async Task DoCreateGroup()
    {
        using Session session = new();
        PermutationGroup group = new(Guid.NewGuid(), groupName.Name, permutationGenerators.Generators, null);
        await session.GroupRepository.AddGroupAsync(group);
        session.SaveChanges();
    }
}
