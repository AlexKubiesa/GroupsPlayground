@page "/"
@using GroupsPlayground.Persistence
@using GroupsPlayground.Domain
@using GroupsPlayground.Blazor.Framework
@inject NavigationManager navigationManager

<h1>Group library</h1>

<div style="padding: 8px">
    <select @bind="@groupCursor.Index" name="groups" size="5" class="list-group">
        @for (int index = 0; index < groups.Count; index++)
        {
            var group = groups[index];
            <option value="@index" class="list-group-item">@group.Name (@group.Elements.Count)</option>
        }
    </select>
</div>

<div style="padding: 8px">
    <button @onclick="@View" class="btn btn-primary" disabled="@(!groupCursor.IsInRange())">View</button>
    <button @onclick="@Create" class="btn btn-secondary">Create</button>
    <button @onclick="@Remove" class="btn btn-secondary" disabled="@(!groupCursor.IsInRange())">Remove</button>
    <button @onclick="@Workspace" class="btn btn-secondary" disabled="@(!groupCursor.IsInRange())">Workspace</button>
</div>

@code
{
    private readonly List<Group> groups;
    private readonly Cursor<Group> groupCursor;

    public Index()
    {
        groups = new List<Group>();
        groupCursor = new Cursor<Group>(groups);
    }

    protected override void OnInitialized()
    {
        using Session session = new();
        RefreshGroups(session);
    }

    private void View()
    {
        var group = groupCursor.GetItem();
        if (group == null)
            return;
        navigationManager.NavigateTo($"/ViewGroup?id={group.Id:N}");
    }

    private void Create() => navigationManager.NavigateTo("/CreateGroup");

    private void Remove()
    {
        var group = groupCursor.GetItem();
        if (group == null)
            return;
        using Session session = new();
        session.GroupRepository.RemoveGroup(group);
        session.SaveChanges();
        RefreshGroups(session);
    }

    private void Workspace()
    {
        var group = groupCursor.GetItem();
        if (group == null)
            return;
        navigationManager.NavigateTo($"/GroupElementWorkspace?group={group.Id:N}");
    }

    private void RefreshGroups(Session session)
    {
        groups.Clear();
        groups.AddRange(session.GroupRepository.GetAllGroups());
    }
}
